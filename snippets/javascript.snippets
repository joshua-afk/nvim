snippet if
		if ($1) {
			$0
		}
snippet ifelse
		if ($1) {
			$2
		} else {
			$0
		}
snippet for
		for (let i = 0; obj < 5; i++) {
		}
snippet try
		try {
			$0
		} catch (err) {
			console.log('Error: ' + err.message)
		}
snippet forin
		for (const $1 in $2) {
			$0
		}
snippet forof
		for (const $1 of $2) {
			$0
		}
snippet cl
		console.log($0)
snippet setTimeout
		setTimeout(() => {
			console.log("Delayed for 1 second.");
		}, "1000")
# custom snippets
snippet customDateOrdinal
        var prefix = function (day) {
            var prfx = '';
            if (day == 1) {
                prfx = 'st';
            } else if (day == 2) {
                prfx = 'nd';
            } else if (day == 3) {
                prfx = 'rd';
            } else {
                prfx = 'th';
            }
            return prfx;
        };
snippet webixajax
		webix.ajax().post('custom?custom_url=custom_employee/import', {
			id: 1,
		}, {
			success: function (text, data) {
				const response = data.json()
				closeWaitBox()
			},
			error: function () {
				closeWaitBox()
				errorMessageBox("Error validating data")
			}
		});
snippet formevents
		define(function () {
			function main(config) {
			}

			main.prototype.getEvents = function (base) {
				const essManagerUserAccountsApproversCustomColumn = function () {
					return {
						id: "ThirdApproverExcessHourFiling",
						header: "3rd Approver Excess Hour Filing",
						fillspace: true,
						template: "{common.checkbox()}",
						css: {"text-align": "center"},
						checkValue: true,
						uncheckValue: false
					}
				}

				const events = {
					onCustomBeforeFormShow: function (form) {
						if(isAccessible["UserAccounts.Custom"]){
							const grid = $$("essManagerUserAccountsApproversTabGrid").getGrid()
							const columns = grid.config.columns

							columns.splice(columns.length, 0, essManagerUserAccountsApproversCustomColumn())
							grid.refreshColumns()
						}
					}
				}
				return events;
			}
			return main;
		});
snippet customroute
		custom?custom_url=custom_employee/import
snippet routedatabyid
		router.post('/data_by_id', async (req, res) => {
			try {
				const id = req.body.id
				const sess = res.locals.session
				const sqlConn = res.locals.sqlConn

				const accessKey = ['Positions.New','Positions.Open']
				const securityKey = await Db.getPPHSecurityKey(res, accessKey)

				let hasAccess = Object.keys(securityKey).length > 0 ? true : false

				if (hasAccess) {
					const result = await sqlConn.request()
						.input('id', sql.Int, id)
						.input('company_id', sql.Int, sess.company_id)
						.query(`SELECT Id, Code, Name, Ranking, Active
									FROM tblPositions p
									WHERE p.Id = @id AND p.CompanyId = @company_id`)

					res.json(result.recordset)
				}
				else {
					res.json({error_message: 'Access Denied', id: id})
				}
			}
			catch (err) {
				res.json({error_message: err.message, id})
			}
		})
snippet routesave
		router.post('/save', async (req, res) => {
			let id = parseInt(req.body.id)
			const sess = res.locals.session

			// check if user has access. Use actual code depending on the project
			const accessKey = ['Positions.Edit', 'Positions.New']
			const securityKey = await Db.getPPHSecurityKey(res, accessKey)

			let hasAccess = Object.keys(securityKey).length > 0 ? true : false

			if (hasAccess) {
				try {
					const sqlConn = res.locals.sqlConn
					const transaction = await sqlConn.transaction()

					await transaction.begin()
					try {
						// use log user here depending on the project
						await common.pphLogUser(transaction, sess.company_id, sess.user_id)

						let formData = JSON.parse(req.body.master_form_data)
						const position = new Position(transaction)
						const duplicateCols = {
							Code: formData.Code
						}

						if (id === 0) {
							formData.CompanyId = sess.company_id
							await position.checkDuplicate(id, duplicateCols)
							let result = await position.insert(formData)
							id = result.Id
						}
						else {
							const params = [
								{name: 'id', type: sql.Int, value: id},
								{name: 'company_id', type: sql.Int, value: sess.company_id}
							]
							await position.checkDuplicate(id, duplicateCols)
							await position.update(params, formData, 'Id = @id AND CompanyId = @company_id')
						}
						
						await transaction.commit()

						res.json({error_message: '', id})
					}
					catch (err) {
						await transaction.rollback()

						res.json({error_message: err.message, id})
					}
				}
				catch (err) {
					res.json({error_message: err.message, id})
				}
			}
			else {
				res.json({error_message: 'Access Denied', id: id})
			}
		})
snippet routetest
		router.get('/test', async (req, res) => {
			try {
				const sess = res.locals.session
				const sqlConn = res.locals.sqlConn

				const result = await sqlConn.request()
					.input('id', sql.Int, 1)
					.input('company_id', sql.Int, sess.company_id)
					.query(`SELECT Id, Code, Name, Ranking, Active
								FROM tblPositions p
								WHERE p.Id = @id AND p.CompanyId = @company_id`)

				res.json(result.recordset)
			}
			catch {
				res.json({})
			}
		})
