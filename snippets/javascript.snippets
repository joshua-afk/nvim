# =========================
# Contents
#
#  ==VANILLA
#    =STANDARD
#    =AJAX
#  
#  ==EXPRESS-JS (NODE)
#    =EXPRESS-ROUTES

#  ==WEBIX (FRONTEND LIBRARY)
#    =WEBIX-AJAX
#    =WEBIX-UI
#
#  ==CUSTOM
#		 =CUSTOM-VANILLA-FUNCTIONS
#		 =CUSTOM-EXPRESS
#		 =CUSTOM-WEBIX
#		 =CUSTOM-OUTPUTS
#
# =========================

# ==VANILLA==
snippet if
		if ($1) {
			$0
		}
snippet ifelse
		if ($1) {
			$2
		} else {
			$0
		}
snippet for
		for (let i = 0; obj < obj.length; i++) {
		}
snippet try
		try {
			$0
		} catch (err) {
			console.log('Error: ' + err.message)
		}
snippet forin
		for (const index in $1) {
			$0
		}
snippet forof
		for (const key of $1) {
			$0
		}
snippet cl
		console.log($0)
snippet settimeout
		setTimeout(() => {
			console.log("Delayed for 1 second.");
		}, "1000")
snippet custom-route-data-by-id
		router.post('/data_by_id', async (req, res) => {
			try {
				const id = req.body.id
				const sess = res.locals.session
				const sqlConn = res.locals.sqlConn

				const accessKey = ['Positions.New','Positions.Open']
				const securityKey = await Db.getPPHSecurityKey(res, accessKey)

				let hasAccess = Object.keys(securityKey).length > 0 ? true : false

				if (hasAccess) {
					const result = await sqlConn.request()
						.input('id', sql.Int, id)
						.input('company_id', sql.Int, sess.company_id)
						.query(`SELECT Id, Code, Name, Ranking, Active
									FROM tblPositions p
									WHERE p.Id = @id AND p.CompanyId = @company_id`)

					res.json(result.recordset)
				}
				else {
					res.json({error_message: 'Access Denied', id: id})
				}
			}
			catch (err) {
				res.json({error_message: err.message, id})
			}
		})
# ==WEBIX-AJAX==
snippet webix-ajax-post
		webix.ajax().post('custom?custom_url=custom_employee/import', {
			id: 1,
		}, {
			success: function (text, data) {
				var res = data.json()
				closeWaitBox()
			},
			error: function () {
				closeWaitBox()
				errorMessageBox("Error validating data")
			}
		})
snippet webix-ajax-get
		webix.ajax().post('custom?custom_url=custom_employee/import', {
			id: 1,
		}, {
			success: function (text, data) {
				var res = data.json()
				closeWaitBox()
			},
			error: function () {
				closeWaitBox()
				errorMessageBox("Error validating data")
			}
		})
# ==WEBIX-UI==
snippet webix-ui-modal
		webix.ui({
			view: "window",
			position: "center",
			width: 300,
			height: 200,
			modal: true,
			borderless: true,
			title: "Inbox",
			head: {
				view: "toolbar",
				height: 33,
				cols: [
					{
						view: "label",
						label: "Inbox"
					},
					{
						view: "icon",
						icon: "fas fa-times-circle",
						click: function () {
							this.getTopParentView().close();
						}
					}
				]
			},
			body: {
			},
		}).show()
snippet webix-ui-datatable
		var datatable = webix.ui({
				view:"datatable", 
				columns:[
						{
								id: "Id",
								header: "Id",
								fillspace: true,
								hidden: true
						},
						{
								id: "EmployeeCode",
								header: "EmployeeCode",
								//editor: "text",
								fillspace: true
						},
				],
				data: employeeListArray
		})
snippet webix-ui-jsgrid
		const jsgrid = webix.ui({
			view: "jsgrid",
			id: "accessControlListFormGrid",
			hideAddButton: false,
			hideRemoveButton: false,
			hideImportButton: true,
			hideExportButton: true,
			autoLoad: true,
			loadUrl: "access_control_list/details",
			paramName: "access_control_list_details",
			columns: [
				{
					id: "Id",
					header: "Id",
					fillspace: true,
					hidden: true
				},
				{
					id: "IPAddress",
					header: "IP Address",
					fillspace: true,
					editor: "text"
				}
			],
		})
# ==CUSTOM-VANILLA-FUNCTIONS==
snippet custom-date-ordinal
		var prefix = function (day) {
				var prfx = '';
				if (day == 1) {
						prfx = 'st';
				} else if (day == 2) {
						prfx = 'nd';
				} else if (day == 3) {
						prfx = 'rd';
				} else {
						prfx = 'th';
				}
				return prfx;
		};
# ==CUSTOM-EXPRESS==
snippet custom-route-test
		router.get('/test', async (req, res) => {
			try {
				const sess = res.locals.session
				const sqlConn = res.locals.sqlConn

				const result = await sqlConn.request()
					.input('id', sql.Int, 1)
					.input('company_id', sql.Int, sess.company_id)
					.query(`SELECT Id, Code, Name, Ranking, Active
								FROM tblPositions p
								WHERE p.Id = @id AND p.CompanyId = @company_id`)

				res.json(result.recordset)
			}
			catch {
				res.json({})
			}
		})
snippet custom-get-lookups
		router.post('/get_lookups', async (req, res) => {
			try {
				const id = req.body.id

				// const accessKey = 'Projects.Open'
				// const hasAccess = (await Db.getSecurityKey(res, accessKey)).length > 0 ? true : false
				const hasAccess = true

				if (hasAccess) {
					let data = {
						'max_file_size': await maxFileSize.getData(res)
					}

					data = lookupHelper.sanitizeObject(data)

					res.json(data)
				} else {
					res.json({error_message: 'Access Denied', id: id})
				}
			} catch {
				res.json({})
			}
		})
snippet custom-route-save
		router.post('/save', async (req, res) => {
			let id = parseInt(req.body.id)
			const sess = res.locals.session

			// check if user has access. Use actual code depending on the project
			const accessKey = ['Positions.Edit', 'Positions.New']
			const securityKey = await Db.getPPHSecurityKey(res, accessKey)

			let hasAccess = Object.keys(securityKey).length > 0 ? true : false

			if (hasAccess) {
				try {
					const sqlConn = res.locals.sqlConn
					const transaction = await sqlConn.transaction()

					await transaction.begin()
					try {
						// use log user here depending on the project
						await common.pphLogUser(transaction, sess.company_id, sess.user_id)

						let formData = JSON.parse(req.body.master_form_data)
						const position = new Position(transaction)
						const duplicateCols = {
							Code: formData.Code
						}

						if (id === 0) {
							formData.CompanyId = sess.company_id
							await position.checkDuplicate(id, duplicateCols)
							let result = await position.insert(formData)
							id = result.Id
						}
						else {
							const params = [
								{name: 'id', type: sql.Int, value: id},
								{name: 'company_id', type: sql.Int, value: sess.company_id}
							]
							await position.checkDuplicate(id, duplicateCols)
							await position.update(params, formData, 'Id = @id AND CompanyId = @company_id')
						}
						
						await transaction.commit()

						res.json({error_message: '', id})
					}
					catch (err) {
						await transaction.rollback()

						res.json({error_message: err.message, id})
					}
				}
				catch (err) {
					res.json({error_message: err.message, id})
				}
			}
			else {
				res.json({error_message: 'Access Denied', id: id})
			}
		})
# ==CUSTOM-WEBIX==
snippet custom-webix-formevents
		define(function () {
			function main(config) {
			}

			main.prototype.getEvents = function (base) {
				const essManagerUserAccountsApproversCustomColumn = function () {
					return {
						id: "ThirdApproverExcessHourFiling",
						header: "3rd Approver Excess Hour Filing",
						fillspace: true,
						template: "{common.checkbox()}",
						css: {"text-align": "center"},
						checkValue: true,
						uncheckValue: false
					}
				}
				const events = {
					onCustomBeforeFormShow: function (form) {
						if(isAccessible["UserAccounts.Custom"]){
							const grid = $$("essManagerUserAccountsApproversTabGrid").getGrid()
							const columns = grid.config.columns

							columns.splice(columns.length, 0, essManagerUserAccountsApproversCustomColumn())
							grid.refreshColumns()
						}
					}
				}
				return events
			}
			return main
		})
# ==CUSTOM-OUTPUTS==
snippet customroute
		custom?custom_url=custom_employee/import
