# =========================
# Contents
#
#  ==REQUIRE
#  ==EXPRESS
#  ==MSSQL
#  ==CUSTOM
#
# =========================

# ==REQUIRE==
snippet require-moment "REQUIRE: import moment"
		const moment = require('moment')
# ==REQUEST==
snippet request-select "MSSQL: select query"
		const result = await sqlConn.request()
			.input('id', sql.Int, id)
			.input('company_id', sql.Int, sess.company_id)
			.query('SELECT Id, CompanyId, TrainingName, TrainingCode, StartDate, EndDate, StartTime, EndTime, TrainingVenue, TrainingDescription, Active FROM tblCustomTGITrainings WHERE Id = @id AND CompanyId = @company_id')
snippet request-insert "MSSQL: insert query"
		await sqlConn.request()
			.input('training_id', sql.Int, params.id)
			.input('employee_id', sql.Int, sess.user_id)
			.input('description', sql.VarChar(5000), params.description)
			.input('file', sql.VarBinary, file.data)
			.input('file_name', sql.VarChar(250), params.upload_fullpath)
			.input('file_size', sql.Int, params.file_size)
			.input('content_type', sql.VarChar(250), params.file_type)
			.query('INSERT INTO tblCustomTGITrainingDocuments (TrainingId, EmployeeId, [Description], [File], [FileName], FileSize, ContentType) VALUES (@training_id, ABS(@employee_id), @description, @file, @file_name, @file_size, @content_type)')
snippet request-update "MSSQL: update query"
		await sqlConn.request()
			.input('id', sql.Int, ids[id])
			.input('company_id', sql.Int, sess.company_id)
			.input('is_publish', sql.VarChar, value)
			.query('UPDATE tblCustomTGITrainings SET IsPublished = @is_publish WHERE Id = @id AND CompanyId = @company_id')
snippet request-delete "MSSQL: delete query"
		await sqlConn.request()
			.input('id', sql.Int, id)
			.input('employee_id', sql.Int, sess.user_id)
			.query('DELETE FROM tblCustomTGITrainingDocuments WHERE Id = @id AND EmployeeId = ABS(@employee_id)')
# ==CUSTOM==
snippet node-current-date "CUSTOM: get current date from database"
		const currentDate = moment(new Date((await sqlConn.request().query("SELECT GETDATE() AS Date")).recordset[0]['Date'])).format('YYYY-MM-DD')
snippet node-route-access-key
	if (accessKey) {
		try {
			const sqlConn = res.locals.sqlConn
			const transaction = await sqlConn.transaction()

			await transaction.begin()
			try {
				// ess
				await common.essLogUser(transaction, companyId, userId)
				// pph
				await common.pphLogUser(transaction, companyId, userId)

        // model
        const MyDocumentEmployee = new CustomMyDocumentEmployee(transaction)

        // query here

				await transaction.commit()
        res.json({error_message: '', isPublished: value})
			} catch (err) {
				await transaction.rollback()
				res.json({error_message: err.message, id})
			}
    } catch (err) {
			res.json({error_message: err.message, id})
		}
	} else {
		res.json({error_message: 'Access Denied', id: id})
	}
